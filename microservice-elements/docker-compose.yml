version: '3.8'

services:

  portainer:
    image: portainer/portainer-ce:2.19.4
    container_name: infrastructure-portainer
    restart: unless-stopped
    read_only: false  
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    ports:
      - "9000:9000"
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    
    environment:
      - PORTAINER_ADMIN_USERNAME=${PORTAINER_ADMIN_USERNAME}
      - PORTAINER_ADMIN_PASSWORD_HASH=${PORTAINER_ADMIN_PASSWORD_HASH}

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7.4.4-alpine
    container_name: infrastructure-redis
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    ports:
      - "6379:6379"
    
    networks:
      - infrastructure-network

    volumes:
      - redis_data:/data
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 768mb
      --maxmemory-policy allkeys-lru
      --save 300 10
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rabbitmq:
    image: rabbitmq:4.1.2-management
    container_name: infrastructure-rabbitmq
    restart: unless-stopped
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'
            
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI & API
      - "1883:1883"   # MQTT
      - "15675:15675" # MQTT over WebSocket
    
    networks:
      - infrastructure-network

    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
      - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE:-secure-cookie-change-me}
    
    command: >
      sh -c "
        rabbitmq-plugins enable rabbitmq_mqtt rabbitmq_web_mqtt &&
        docker-entrypoint.sh rabbitmq-server
      "
    
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongodb:
    image: mongodb/mongodb-community-server:7.0.19-ubuntu2204
    container_name: infrastructure-mongodb
    restart: unless-stopped

    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.2'
    
    ports:
      - "27017:27017"
    
    networks:
      - infrastructure-network
    
    volumes:
      - mongodb_data:/data/db
    
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-application_db}
    
    command: >
      mongod 
      --logpath /dev/stdout
    
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  influxdb:
    image: influxdb:2.7.12
    container_name: infrastructure-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    networks:
      - infrastructure-network
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-your-influxdb-password}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-my-org}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-my-bucket}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}

  telegraf:
    image: telegraf:1.34.4
    container_name: infrastructure-telegraf
    restart: unless-stopped
    depends_on:
      - influxdb
      - rabbitmq
    networks:
      - infrastructure-network
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      - HOSTNAME=telegraf
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-my-org}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-my-bucket}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_RETENTION:-2d}

volumes:
  portainer_data:
  redis_data:
  rabbitmq_data:
  mongodb_data:
  mosquitto_data:
  influxdb_data:

networks:
  infrastructure-network:
    driver: bridge